Computer programming - WikipediaComputer programmingFrom Wikipedia the free encyclopediaJump to navigationJump to searchProcess that leads from an original formulation of a computing problem to executable computer programs  Example of an internet chess program Lichess showing artificial intelligence programming if the white bishop at b3 moves to a2 capturing the black knight then the program is designed to find the most advantageous move for black very likely capturing the bishop with the b1 pawn Black has just moved a pawn to c2Computer programming is the process of designing and building an executable computer program for accomplishing a specific computing result Programming involves tasks such as analysis generating algorithms profiling algorithms accuracy and resource consumption and the implementation of algorithms in a chosen programming language commonly referred to as coding12 The source code of a program is written in one or more languages that are intelligible to programmers rather than machine code which is directly executed by the central processing unit The purpose of programming is to find a sequence of instructions that will automate the performance of a task which can be as complex as an operating system on a computer often for solving a given problem The process of programming thus often requires expertise in several different subjects including knowledge of the application domain specialized algorithms and formal logicTasks accompanying and related to programming include testing debugging source code maintenance implementation of build systems and management of derived artifacts such as the machine code of computer programs These might be considered part of the programming process but often the term software development is used for this larger process with the term programming implementation or coding reserved for the actual writing of code Software engineering combines engineering techniques with software development practices Reverse engineering is the opposite process A hacker is any skilled computer expert that uses their technical knowledge to overcome a problem but it can also mean a security hacker in common languageContents1 History2 Modern programming21 Quality requirements22 Readability of source code23 Algorithmic complexity231 Chess algorithms as an example24 Methodologies25 Measuring language usage26 Debugging3 Programming languages4 Programmers5 See also6 References61 Sources7 Further reading8 External linksHistoryedit  Ada Lovelace whose notes added to the end of Luigi Menabreas paper included the first algorithm designed for processing by an Analytical Engine She is often recognized as historys first computer programmerSee also History of programming languagesProgrammable devices have existed for centuries As early as the 9th century a programmable music sequencer was invented by the Persian Banu Musa brothers who described an automated mechanical flute player in the Book of Ingenious Devices34 In 1206 the Arab engineer Al-Jazari invented a programmable drum machine where musical mechanical automaton could be made to play different rhythms and drum patterns via pegs and cams56 In 1801 the Jacquard loom could produce entirely different weaves by changing the program - a series of pasteboard cards with holes punched in themCode-breaking algorithms have also existed for centuries In the 9th century the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code in A Manuscript On Deciphering Cryptographic Messages He gave the first description of cryptanalysis by frequency analysis the earliest code-breaking algorithm7The first computer program is generally dated to 1843 when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers intended to be carried out by Charles Babbages Analytical Engine8  Data and instructions were once stored on external punched cards which were kept in order and arranged in program decksIn the 1880s Herman Hollerith invented the concept of storing data in machine-readable form9 Later a control panel plugboard added to his 1906 Type I Tabulator allowed it to be programmed for different jobs and by the late 1940s unit record equipment such as the IBM 602 and IBM 604 were programmed by control panels in a similar way as were the first electronic computers However with the concept of the stored-program computers introduced in 1949 both programs and data were stored and manipulated in the same way in computer memorycitation neededMachine code was the language of early programs written in the instruction set of the particular machine often in binary notation Assembly languages were soon developed that let the programmer specify instruction in a text format eg ADD X TOTAL with abbreviations for each operation code and meaningful names for specifying addresses However because an assembly language is little more than a different notation for a machine language any two machines with different instruction sets also have different assembly languages  Wired control panel for an IBM 402 Accounting MachineHigh-level languages made the process of developing a program simpler and more understandable and less bound to the underlying hardware FORTRAN the first widely used high-level language to have a functional implementation came out in 195710 and many other languages were soon developed  in particular COBOL aimed at commercial data processing and Lisp for computer researchPrograms were mostly still entered using punched cards or paper tape See computer programming in the punch card era By the late 1960s data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers Text editors programs themselves were developed that allowed changes and corrections to be made much more easily than with punched cardsModern programmingeditThis section needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removedFind sourcesComputer programmingnews newspapers books scholar JSTOR  August 2010 Learn how and when to remove this template messageQuality requirementseditSoftware developmentCore activitiesProcessesRequirementsDesignEngineeringConstructionTestingDebuggingDeploymentMaintenanceParadigms and modelsAgileCleanroomIncrementalPrototypingSpiralV modelWaterfallMethodologies and frameworksASDDevOpsDADDSDMFDDIIDKanbanLean SDLeSSMDDMSFPSPRADRUPSAFeScrumSEMATTSPOpenUPUPXPSupporting disciplinesConfiguration managementDocumentationSoftware quality assurance SQAProject managementUser experiencePracticesATDDBDDCCOCICDDDDPPSBEStand-upTDDToolsCompilerDebuggerProfilerGUI designerModelingIDEBuild automationRelease automationInfrastructure as codeTestingStandards and Bodies of KnowledgeBABOKCMMIIEEE standardsISO 9001ISOIEC standardsPMBOKSWEBOKITILGlossariesArtificial intelligenceComputer scienceElectrical and electronics engineeringvteWhatever the approach to development may be the final program must satisfy some fundamental properties The following properties are among the most importantReliability how often the results of a program are correct This depends on conceptual correctness of algorithms and minimization of programming mistakes such as mistakes in resource management eg buffer overflows and race conditions and logic errors such as division by zero or off-by-one errorsRobustness how well a program anticipates problems due to errors not bugs This includes situations such as incorrect inappropriate or corrupt data unavailability of needed resources such as memory operating system services and network connections user error and unexpected power outagesUsability the ergonomics of a program the ease with which a person can use the program for its intended purpose or in some cases even unanticipated purposes Such issues can make or break its success even regardless of other issues This involves a wide range of textual graphical and sometimes hardware elements that improve the clarity intuitiveness cohesiveness and completeness of a programs user interfacePortability the range of computer hardware and operating system platforms on which the source code of a program can be compiledinterpreted and run This depends on differences in the programming facilities provided by the different platforms including hardware and operating system resources expected behavior of the hardware and operating system and availability of platform specific compilers and sometimes libraries for the language of the source codeMaintainability the ease with which a program can be modified by its present or future developers in order to make improvements or customisations fix bugs and security holes or adapt it to new environments Good practices during initial development make the difference in this regard This quality may not be directly apparent to the end user but it can significantly affect the fate of a program over the long termEfficiencyperformance Measure of system resources a program consumes processor time memory space slow devices such as disks network bandwidth and to some extent even user interaction the less the better This also includes careful management of resources for example cleaning up temporary files and eliminating memory leaksReadability of source codeeditIn computer programming readability refers to the ease with which a human reader can comprehend the purpose control flow and operation of source code It affects the aspects of quality above including portability usability and most importantly maintainabilityReadability is important because programmers spend the majority of their time reading trying to understand and modifying existing source code rather than writing new source code Unreadable code often leads to bugs inefficiencies and duplicated code A study11 found that a few simple readability transformations made code shorter and drastically reduced the time to understand itFollowing a consistent programming style often helps readability However readability is more than just programming style Many factors having little or nothing to do with the ability of the computer to efficiently compile and execute the code contribute to readability12 Some of these factors includeDifferent indent styles whitespaceCommentsDecompositionNaming conventions for objects such as variables classes procedures etcThe presentation aspects of this such as indents line breaks color highlighting and so on are often handled by the source code editor but the content aspects reflect the programmers talent and skillsVarious visual programming languages have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display Integrated development environments IDEs aim to integrate all such help Techniques like Code refactoring can enhance readabilityAlgorithmic complexityeditThe academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problem For this purpose algorithms are classified into orders using so-called Big O notation which expresses resource use such as execution time or memory consumption in terms of the size of an input Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstancesChess algorithms as an exampleeditProgramming a Computer for Playing Chess was a 1950 paper that evaluated a minimax algorithm that is part of the history of algorithmic complexity a course on IBMs Deep Blue chess computer is part of the computer science curriculum at Stanford University13MethodologieseditThe first step in most formal software development processes is requirements analysis followed by testing to determine value modeling implementation and failure elimination debugging There exist a lot of differing approaches for each of those tasks One approach popular for requirements analysis is Use Case analysis Many programmers use forms of Agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years There are many approaches to the Software development processPopular modeling techniques include Object-Oriented Analysis and Design OOAD and Model-Driven Architecture MDA The Unified Modeling Language UML is a notation used for both the OOAD and MDAA similar technique used for database design is Entity-Relationship Modeling ER ModelingImplementation techniques include imperative languages object-oriented or procedural functional languages and logic languagesMeasuring language usageeditMain article Measuring programming language popularityIt is very difficult to determine what are the most popular of modern programming languages Methods of measuring programming language popularity include counting the number of job advertisements that mention the language14 the number of books sold and courses teaching the language this overestimates the importance of newer languages and estimates of the number of existing lines of code written in the language this underestimates the number of users of business languages such as COBOLSome languages are very popular for particular kinds of applications while some languages are regularly used to write many different kinds of applications For example COBOL is still strong in corporate data centers15 often on large mainframe computers Fortran in engineering applications scripting languages in Web development and C in embedded software Many applications use a mix of several languages in their construction and use  New languages are generally designed around the syntax of a prior language with new functionality added for example C adds object-orientation to C and Java adds memory management and bytecode to C but as a result loses efficiency and the ability for low-level manipulationDebuggingedit  The bug from 1947 which is at the origin of a popular etymology for the common term for a software defectMain article DebuggingDebugging is a very important task in the software development process since having defects in a program can have significant consequences for its users Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages Use of a static code analysis tool can help detect some possible problems Normally the first step in debugging is to attempt to reproduce the problem This can be a non-trivial task for example as with parallel processes or some unusual software bugs Also specific user environment and usage history can make it difficult to reproduce the problemAfter the bug is reproduced the input of the program may need to be simplified to make it easier to debug For example a bug in a compiler can make it crash when passing some large source file However after simplification of the test case only few lines from the original source file can be sufficient to reproduce the same crash Such simplification can be done manually using a divide-and-conquer approach The programmer will try to remove some parts of original test case and check if the problem still exists When debugging the problem in a GUI the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appearDebugging is often done with IDEs like Eclipse Visual Studio Xcode Kdevelop NetBeans and CodeBlocks Standalone debuggers like GDB are also used and these often provide less of a visual environment usually using a command line Some text editors such as Emacs allow GDB to be invoked through them to provide a visual environmentProgramming languageseditMain articles Programming language and List of programming languagesDifferent programming languages support different styles of programming called programming paradigms The choice of language used is subject to many considerations such as company policy suitability to task availability of third-party packages or individual preference Ideally the programming language best suited for the task at hand will be selected Trade-offs from this ideal involve finding enough programmers who know the language to build a team the availability of compilers for that language and the efficiency with which programs written in a given language execute Languages form an approximate spectrum from low-level to high-level low-level languages are typically more machine-oriented and faster to execute whereas high-level languages are more abstract and easier to use but execute less quickly It is usually easier to code in high-level languages than in low-level onesAllen Downey in his bookHow To Think Like A Computer Scientist writesThe details look different in different languages but a few basic instructions appear in just about every languageInput Gather data from the keyboard a file or some other deviceOutput Display data on the screen or send data to a file or other deviceArithmetic Perform basic arithmetical operations like addition and multiplicationConditional Execution Check for certain conditions and execute the appropriate sequence of statementsRepetition Perform some action repeatedly usually with some variationMany computer languages provide a mechanism to call functions provided by shared libraries Provided the functions in a library follow the appropriate run-time conventions eg method of passing arguments then these functions may be written in any other languageProgrammerseditMain article ProgrammerSee also Software developer and Software engineerComputer programmers are those who write computer software Their jobs usually involveCodingDebuggingDocumentationIntegrationMaintenanceRequirements analysisSoftware architectureSoftware testingSpecificationSee alsoeditComputer programming portalMain article Outline of computer programmingACCUAssociation for Computing MachineryComputer networkingHello world programInstitution of Analysts and ProgrammersNational Coding WeekSystem programmingComputer programming in the punched card eraThe Art of Computer ProgrammingWomen in computingTimeline of women in computingReferencesedit Shaun Bebbington 2014 What is coding Retrieved 2014-03-03 Shaun Bebbington 2014 What is programming Retrieved 2014-03-03 Koetsier Teun 2001 On the prehistory of programmable machines musical automata looms calculators Mechanism and Machine Theory Elsevier 36 5 589603 doi101016S0094-114X0100005-2 Kapur Ajay Carnegie Dale Murphy Jim Long Jason 2017 Loudspeakers Optional A history of non-loudspeaker-based electroacoustic music Organised Sound Cambridge University Press 22 2 195205 doi101017S1355771817000103 ISSN1355-7718 Fowler Charles B October 1967 The Museum of Music A History of Mechanical Instruments Music Educators Journal 54 2 4549 doi1023073391092 JSTOR3391092 Noel Sharkey 2007 A 13th Century Programmable Robot University of Sheffield Dooley John F 2013 A Brief History of Cryptology and Cryptographic Algorithms Springer Science  Business Media pp123 ISBN9783319016283 Fuegi J Francis J 2003 Lovelace  Babbage and the Creation of the 1843 notes IEEE Annals of the History of Computing 25 4 16 doi101109MAHC20031253887 Columbia University Computing History  Herman Hollerith Columbiaedu Retrieved 2010-04-25 Fortran creator John Backus dies - Tech and gadgets- NBC News NBC News 2007-03-20 Retrieved 2010-04-25 Elshoff James L Marcotty Michael 1982 Improving computer program readability to aid modification Communications of the ACM 25 8 512521 doi101145358589358596 Multiple wiki Readability Docforge Retrieved 2010-01-30 CS221 In 1950 Claude Shannon published  Programming a Computer for Playing Chess  minimax algorithm Survey of Job advertisements mentioning a given language Mitchell Robert 2012-05-21 The Cobol Brain Drain Computer World Retrieved 9 May 2015SourceseditCeruzzi Paul E 1998 History of Computing Cambridge Massachusetts MIT Press ISBN9780262032551  via EBSCOhostEvans Claire L 2018 Broad Band The Untold Story of the Women Who Made the Internet New York PortfolioPenguin ISBN9780735211759Grer Denise 1995 Pioneering Women in Computer Science PDF Communications of the ACM 38 1 4554 doi101145204865204875Smith Erika E 2013 Recognizing a Collective Inheritance through the History of Women in Computing CLCWeb Comparative Literature  Culture A WWWeb Journal 15 1 19  via EBSCOhostFurther readingeditAK Hartmann Practical Guide to Computer Simulations Singapore World Scientific 2009A Hunt D Thomas and W Cunningham The Pragmatic Programmer From Journeyman to Master Amsterdam Addison-Wesley Longman 1999Brian W Kernighan The Practice of Programming Pearson 1999Weinberg Gerald M The Psychology of Computer Programming New York Van Nostrand Reinhold 1971Edsger W Dijkstra A Discipline of Programming Prentice-Hall 1976O-J Dahl EWDijkstra CAR Hoare Structured Programming Academic Press 1972David Gries The Science of Programming Springer-Verlag 1981External linkseditLibrary resources about  Computer programming Online booksResources in your libraryResources in other librariesWikibooks has a book on the topic of Computer ProgrammingWikibooks has a book on the topic of Windows ProgrammingWikiversity has learning resources about Computer Programming Media related to Computer programming at Wikimedia Commons Quotations related to Programming at WikiquoteSoftware engineering at CurlievteComputer scienceNote This template roughly follows the 2012 ACM Computing Classification SystemHardwarePrinted circuit boardPeripheralIntegrated circuitVery Large Scale IntegrationSystems on Chip SoCsEnergy consumption Green computingElectronic design automationHardware accelerationComputer systemsorganizationComputer architectureEmbedded systemReal-time computingDependabilityNetworksNetwork architectureNetwork protocolNetwork componentsNetwork schedulerNetwork performance evaluationNetwork serviceSoftware organizationInterpreterMiddlewareVirtual machineOperating systemSoftware qualitySoftware notationsand toolsProgramming paradigmProgramming languageCompilerDomain-specific languageModeling languageSoftware frameworkIntegrated development environmentSoftware configuration managementSoftware librarySoftware repositorySoftware developmentSoftware development processRequirements analysisSoftware designSoftware constructionSoftware deploymentSoftware maintenanceProgramming teamOpen-source modelTheory of computationModel of computationFormal languageAutomata theoryComputability theoryComputational complexity theoryLogicSemanticsAlgorithmsAlgorithm designAnalysis of algorithmsAlgorithmic efficiencyRandomized algorithmComputational geometryMathematicsof computingDiscrete mathematicsProbabilityStatisticsMathematical softwareInformation theoryMathematical analysisNumerical analysisInformationsystemsDatabase management systemInformation storage systemsEnterprise information systemSocial information systemsGeographic information systemDecision support systemProcess control systemMultimedia information systemData miningDigital libraryComputing platformDigital marketingWorld Wide WebInformation retrievalSecurityCryptographyFormal methodsSecurity servicesIntrusion detection systemHardware securityNetwork securityInformation securityApplication securityHumancomputerinteractionInteraction designSocial computingUbiquitous computingVisualizationAccessibilityConcurrencyConcurrent computingParallel computingDistributed computingMultithreadingMultiprocessingArtificialintelligenceNatural language processingKnowledge representation and reasoningComputer visionAutomated planning and schedulingSearch methodologyControl methodPhilosophy of artificial intelligenceDistributed artificial intelligenceMachine learningSupervised learningUnsupervised learningReinforcement learningMulti-task learningCross-validationGraphicsAnimationRenderingImage manipulationGraphics processing unitMixed realityVirtual realityImage compressionSolid modelingAppliedcomputingE-commerceEnterprise softwareComputational mathematicsComputational physicsComputational chemistryComputational biologyComputational social scienceComputational engineeringComputational healthcareDigital artElectronic publishingCyberwarfareElectronic votingVideo gamesWord processingOperations researchEducational technologyDocument management Book Category OutlineWikiProject CommonsvteSoftware engineeringFieldsComputer programmingRequirements engineeringSoftware deploymentSoftware designSoftware maintenanceSoftware testingSystems analysisFormal methodsConceptsData modelingEnterprise architectureFunctional specificationModeling languageOrthogonalityProgramming paradigmSoftwareSoftware archaeologySoftware architectureSoftware configuration managementSoftware development methodologySoftware development processSoftware qualitySoftware quality assuranceSoftware verification and validationStructured analysisOrientationsAgileAspect-orientedObject orientationOntologyService orientationSDLCModelsDevelopmentalAgileEUPExecutable UMLIncremental modelIterative modelPrototype modelRADUPScrumSpiral modelV-ModelWaterfall modelXPOtherSPICECMMIData modelER modelFunction modelInformation modelMetamodelingObject modelSystems modelView modelLanguagesIDEFUMLUSLSysMLSoftwareengineersVictor BasiliKent BeckGrady BoochFred BrooksBarry BoehmPeter ChenDanese CooperWard CunninghamTom DeMarcoEdsger W DijkstraDelores M EtterMartin FowlerAdele GoldstineMargaret HamiltonC A R HoareLois HaibtMary Jean HarroldGrace HopperWatts HumphreyMichael A JacksonIvar JacobsonAlan KayNancy LevesonStephen J MellorBertrand MeyerDavid ParnasTrygve ReenskaugWinston W RoyceJames RumbaughMary ShawPeri TarrElaine WeyukerNiklaus WirthEdward YourdonRelated fieldsComputer scienceComputer engineeringProject managementRisk managementSystems engineering Category CommonsAuthority control BNF cb11932648m dataGND 4076370-5LCCN sh85107310NDL 00569223img srcenwikipediaorgwikiSpecialCentralAutoLoginstarttype1x1 alt title width1 height1 styleborder none position absolute Retrieved from httpsenwikipediaorgwindexphptitleComputerprogrammingoldid936045838Categories Computer programmingComputersHidden categories Articles with short descriptionArticles with long short descriptionAll articles with unsourced statementsArticles with unsourced statements from December 2018Articles needing additional references from August 2010All articles needing additional referencesCommons category link is on WikidataArticles with Curlie linksWikipedia articles with BNF identifiersWikipedia articles with GND identifiersWikipedia articles with LCCN identifiersWikipedia articles with NDL identifiersNavigation menuPersonal toolsNot logged inTalkContributionsCreate accountLog inNamespacesArticleTalkVariantsViewsReadEditView historyMoreSearchNavigationMain pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia storeInteractionHelpAbout WikipediaCommunity portalRecent changesContact pageToolsWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this pageIn other projectsWikimedia CommonsWikibooksWikiquoteWikiversityPrintexportCreate a bookDownload as PDFPrintable versionLanguagesAfrikaansAragonsAsturianuAzrbaycanca BosanskiCataletinaDanskDeutschEestiEspaolEsperantoEuskaraFranaisGalegoHrvatskiBahasa IndonesiaItalianoLatinaLatvieuLietuviLa lojbanLumbaartMagyarBahasa MelayuNederlandsNorsk bokmlNorsk nynorskOccitan OzbekchaPolskiPortugusRomnScotsShqipSimple EnglishSloveninaSlovenina  srpskiSrpskohrvatski  SuomiSvenskaTrkeTrkmene Ting VitZazakiEdit links This page was last edited on 16 January 2020 at 1053UTCText is available under the Creative Commons Attribution-ShareAlike Licenseadditional terms may apply  By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a non-profit organizationPrivacy policyAbout WikipediaDisclaimersContact WikipediaDevelopersStatisticsCookie statementMobile view